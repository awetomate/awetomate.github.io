[{"content":"","date":"16 October 2022","permalink":"/","section":"Awetomate","summary":"","title":"Awetomate"},{"content":"","date":"16 October 2022","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"16 October 2022","permalink":"/tags/cucm/","section":"Tags","summary":"","title":"cucm"},{"content":"There may be many reasons why you would need to check which users have the home cluster enabled on a given CUCM cluster. In my personal experience, the most common reason is to troubleshoot an issue with people being unable to log into Cisco Jabber due to a “Unable to Communicate with Server” error message. Now, many things could cause issues with Jabber\u0026rsquo;s service discovery and authentication process (e.g. issues with DNS, missing discovery host records, firewalls blocking traffic, issues with the LDAP authorization, etc.). However, in my personal experience, it usually tends to be an issue with the home cluster being enabled on multiple clusters at once or the home cluster not being enabled on the target cluster.\nLuckily, it\u0026rsquo;s very straightforward to get the status of the home cluster setting (islocaluser) from the enduser table. In this example, we will also include the service profile\u0026rsquo;s name in the result. To make sure we can uniquely identify a user, we will include the username, first name, and last name, too.\nHome cluster for all users # Relevant data, attributes, tables # Tables # enduser AS eu contains information about end users ucserviceprofile AS ucp translates the ucserviceprofile integers (enums) to the human-readable service profile names Attributes # eu.userid AS id eu.firstname AS first_name eu.lastname AS last_name eu.islocaluser AS homecluster ucp.name AS serviceprofile Conditions # eu.islocaluser = 't' only include users whose Home Cluster setting (islocaluser) is enabled or true (t) Query # Use the following query to get a report of all users who have the home cluster setting enabled.\nSELECT eu.userid AS id, eu.firstname AS first_name, eu.lastname AS last_name, eu.islocaluser AS homecluster, ucp.name AS serviceprofile FROM enduser AS eu LEFT JOIN ucserviceprofile AS ucp ON ucp.pkid = eu.fkucserviceprofile WHERE eu.islocaluser = \u0026#39;t\u0026#39; ORDER BY eu.userid Return # id first_name last_name homecluster serviceprofile ========= ========== ========= =========== ============== jdoe1 Jane Doe t UCSP_STANDARD jdoe2 John Doe t UCSP_STANDARD HBarbossa Hector Barbossa t UCSP_SPECIAL ... Home cluster for a specific user # I modified the first query by adding the and eu.userid=’user1′ condition to limit our output to just the one user we want. We don’t want to pull a full report for all users; we just want a quick and easy way to verify the setting against a single problematic user.\nImportant! SQL userid search is case-sensitive by default! Relevant data, attributes, tables # Tables # enduser AS eu contains information about end users ucserviceprofile AS ucp translates the ucserviceprofile integers (enums) to the human-readable service profile names Attributes # eu.userid AS id eu.firstname AS first_name eu.lastname AS last_name eu.islocaluser AS homecluster ucp.name AS serviceprofile Conditions # eu.islocaluser = 't' only include users whose Home Cluster setting (islocaluser) is enabled or true (t) eu.userid = 'jdoe1' filter on one specific user id Query # Use the following query to get a report of all users who have the home cluster setting enabled.\nSELECT eu.userid AS id, eu.firstname AS first_name, eu.lastname AS last_name, eu.islocaluser AS homecluster, ucp.name AS serviceprofile FROM enduser AS eu LEFT JOIN ucserviceprofile AS ucp ON ucp.pkid = eu.fkucserviceprofile WHERE eu.islocaluser = \u0026#39;t\u0026#39; AND eu.userid = \u0026#39;jdoe1\u0026#39; ORDER BY eu.userid Return # id first_name last_name homecluster serviceprofile ======= ========== ========= =========== ============== jdoe1 Jane Doe t UCSP_STANDARD ... Case-insensitive query # An easy way to avoid the case sensitivity issue is to turn the userid and the search string into uppercase or lowercase before comparing them.\nSELECT eu.userid AS id, eu.firstname AS first_name, eu.lastname AS last_name, eu.islocaluser AS homecluster, ucp.name AS serviceprofile FROM enduser AS eu LEFT JOIN ucserviceprofile AS ucp ON ucp.pkid = eu.fkucserviceprofile WHERE eu.islocaluser = \u0026#39;t\u0026#39; AND UPPER(eu.userid) = UPPER(\u0026#39;hbarbossa\u0026#39;) ORDER BY eu.userid Return # id first_name last_name homecluster serviceprofile ========= ========== ========= =========== ============== HBarbossa Hector Barbossa t UCSP_SPECIAL ... ","date":"16 October 2022","permalink":"/2022/10/home-cluster-check-via-sql/","section":"Posts","summary":"There may be many reasons why you would need to check which users have the home cluster enabled on a given CUCM cluster. In my personal experience, the most common reason is to troubleshoot an issue with people being unable to log into Cisco Jabber due to a “Unable to Communicate with Server” error message.","title":"Home Cluster Check via Sql"},{"content":"","date":"16 October 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"16 October 2022","permalink":"/tags/sql/","section":"Tags","summary":"","title":"sql"},{"content":"","date":"16 October 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"16 October 2022","permalink":"/categories/unified-communications/","section":"Categories","summary":"","title":"Unified Communications"},{"content":"As with every CUCM release, some phones will not be supported anymore. For this example, let us look at how to find a list of phones on CUCM 11.X that are deprecated in release 12.X and newer.\nThe deprecated and supported phone lists are included in the 12.5 compatibility matrix. The following two queries help extract the necessary data for deprecated and unsupported device models and phone counts.\nDeprecated Phone Models # The following table lists all the phone models that are deprecated for this release of Unified Communications Manager, along with the Unified CM release where the phone model first became deprecated.\nDeprecated Phone Models for this Release First Deprecated as of Unified CM Cisco Unified Wireless IP Phone 7921\nCisco Unified IP Phone 7970\nCisco Unified IP Phone 7971 12.0(1) and later releases Cisco IP Phone 12 S\nCisco IP Phone 12 SP\nCisco IP Phone 12 SP+\nCisco IP Phone 30 SP+\nCisco IP Phone 30 VIP\nCisco Unified IP Phone 7902G\nCisco Unified IP Phone 7905G\nCisco Unified IP Phone 7910\nCisco Unified IP Phone 7910G\nCisco Unified IP Phone 7910+SW\nCisco Unified IP Phone 7910G+SW\nCisco Unified IP Phone 7912G\nCisco Unified Wireless IP Phone 7920\nCisco Unified IP Conference Station 7935 11.5(1) and later releases Relevant data, attributes, tables # Tables # device contains information about the phones typemodel translates the typemodel integers (enums) to the human-readable phone model names Attributes # typemode.name Conditions # typemodel.name in ( list of deprecated phones) Query # Use the following query to get the count for each deprecated phone model.\nSELECT COUNT(*), typemodel.name AS phonemodel FROM device INNER JOIN typemodel ON typemodel.enum = device.tkmodel WHERE typemodel.name IN ( \u0026#39;Cisco 7970\u0026#39;, \u0026#39;Cisco 7971\u0026#39;, \u0026#39;Cisco 7921\u0026#39;, \u0026#39;Cisco 12 SP+\u0026#39;, \u0026#39;Cisco 12 SP\u0026#39;, \u0026#39;Cisco 12 S\u0026#39;, \u0026#39;Cisco 30 VIP\u0026#39;, \u0026#39;Cisco 30 SP+\u0026#39;, \u0026#39;Cisco 7902\u0026#39;, \u0026#39;Cisco 7905\u0026#39;, \u0026#39;Cisco 7910\u0026#39;, \u0026#39;Cisco 7912\u0026#39;, \u0026#39;Cisco 7920\u0026#39; ) GROUP BY typemodel.name ORDER BY typemodel.name Return # The query will return a table with two columns, one containing the deprecated phone model and the other the count of how many there are in the environment.\nrun sql SELECT COUNT(*), typemodel.name as phonemodel FROM device INNER JOIN typemodel ON typemodel.enum=device.tkmodel WHERE typemodel.name in ( \u0026#39;Cisco 7970\u0026#39;, \u0026#39;Cisco 7971\u0026#39;, \u0026#39;Cisco 7921\u0026#39;, \u0026#39;Cisco 12 SP+\u0026#39;, \u0026#39;Cisco 12 SP\u0026#39;, \u0026#39;Cisco 12 S\u0026#39;, \u0026#39;Cisco 30 VIP\u0026#39;, \u0026#39;Cisco 30 SP+\u0026#39;, \u0026#39;Cisco 7902\u0026#39;, \u0026#39;Cisco 7905\u0026#39;, \u0026#39;Cisco 7910\u0026#39;, \u0026#39;Cisco 7912\u0026#39;, \u0026#39;Cisco 7920\u0026#39; ) GROUP BY typemodel.name ORDER BY typemodel.name (count(*)) phonemodel ========== ========== 7 Cisco 7921 1 Cisco 7970 ... Unsupported Phone Models # This query is much longer and lists all phone models/counts by excluding system devices, all supported models and deprecated models.\nCisco Endpoints at End of Support Cisco Unified SIP Phone 3911, 3951 Cisco Unified IP Phone 6911, 6921, 6941, 6945, 6961, 7906G, 7911G, 7931G, 7940G, 7941G, 7960G, 7961G, 8941 Cisco Unified IP Phone Expansion Module 7925G, 7925G-EX, 7926G Cisco Unified IP Conference Station 7935, 7936, 7937G Cisco TelePresence EX60 Cisco TelePresence MX200-G1, MX200-G2, MX300-G1, MX300-G2 Cisco TelePresence 500-32, 500-37, 1000 MXP, 1100, 1300-65, 1300-47, 3000 Series Relevant data, attributes, tables # Tables # device contains information about the phones typemodel translates the typemodel integers (enums) to the human-readable phone model names Attributes # typemode.name Conditions # typemodel.name NOT IN ( list of supported or deprecated phones) Query # Use the following query to get the count for each unsupported phone model.\nSELECT COUNT(*), typemodel.name AS phonemodel FROM device INNER JOIN typemodel ON typemodel.enum = device.tkmodel WHERE typemodel.name NOT IN ( \u0026#39;Cisco 3905\u0026#39;, \u0026#39;Cisco 6901\u0026#39;, \u0026#39;Cisco 7841\u0026#39;, \u0026#39;Cisco 7811\u0026#39;, \u0026#39;Cisco 7821\u0026#39;, \u0026#39;Cisco 7841\u0026#39;, \u0026#39;Cisco 7861\u0026#39;, \u0026#39;Cisco 7832\u0026#39;, \u0026#39;7915 12-Button Line Expansion Module\u0026#39;, \u0026#39;7915 24-Button Line Expansion Module\u0026#39;, \u0026#39;7916 12-Button Line Expansion Module\u0026#39;, \u0026#39;7916 24-Button Line Expansion Module\u0026#39;, \u0026#39;Cisco 7942\u0026#39;, \u0026#39;Cisco 7962\u0026#39;, \u0026#39;Cisco 7945\u0026#39;, \u0026#39;Cisco 7965\u0026#39;, \u0026#39;Cisco 8811\u0026#39;, \u0026#39;Cisco 8821\u0026#39;, \u0026#39;Cisco 8841\u0026#39;, \u0026#39;Cisco 8851\u0026#39;, \u0026#39;Cisco 8851NR\u0026#39;, \u0026#39;Cisco 8861\u0026#39;, \u0026#39;Cisco 8831\u0026#39;, \u0026#39;Cisco 8845\u0026#39;, \u0026#39;Cisco 8865\u0026#39;, \u0026#39;Cisco 8865NR\u0026#39;, \u0026#39;Cisco 8832\u0026#39;, \u0026#39;Cisco 8945\u0026#39;, \u0026#39;Cisco 8961\u0026#39;, \u0026#39;Cisco 9951\u0026#39;, \u0026#39;Cisco 9971\u0026#39;, \u0026#39;Cisco Dual Mode for Android\u0026#39;, \u0026#39;Cisco Dual Mode for iPhone\u0026#39;, \u0026#39;Cisco Jabber for Tablet\u0026#39;, \u0026#39;Cisco Jabber for Mac\u0026#39;, \u0026#39;Cisco Unified Client Services Framework\u0026#39;, \u0026#39;Cisco IP Communicator\u0026#39;, \u0026#39;Cisco ATA 190\u0026#39;, \u0026#39;Cisco ATA 191\u0026#39;, \u0026#39;Cisco DX650\u0026#39;, \u0026#39;Cisco DX70\u0026#39;, \u0026#39;Cisco DX80\u0026#39;, \u0026#39;Cisco TelePresence IX5000\u0026#39;, \u0026#39;Cisco TelePresence EX60\u0026#39;, \u0026#39;Cisco TelePresence EX90\u0026#39;, \u0026#39;Cisco TelePresence MX200 G2\u0026#39;, \u0026#39;Cisco TelePresence MX300 G2\u0026#39;, \u0026#39;Cisco TelePresence MX700\u0026#39;, \u0026#39;Cisco TelePresence MX800\u0026#39;, \u0026#39;Cisco TelePresence MX800 Dual\u0026#39;, \u0026#39;Cisco TelePresence SX10\u0026#39;, \u0026#39;Cisco TelePresence SX20\u0026#39;, \u0026#39;Cisco TelePresence SX80\u0026#39;, \u0026#39;Cisco Webex DX80\u0026#39; ) AND typemodel.name NOT IN ( \u0026#39;Analog Phone\u0026#39;, \u0026#39;Cisco VGC Phone\u0026#39;, \u0026#39;Cisco IOS Conference Bridge (HDV2)\u0026#39;, \u0026#39;MGCP Trunk\u0026#39;, \u0026#39;CTI Port\u0026#39;, \u0026#39;Conference Bridge\u0026#39;, \u0026#39;Media Termination Point\u0026#39;, \u0026#39;Interactive Voice Response\u0026#39;, \u0026#39;Cisco IOS Media Termination Point (HDV2)\u0026#39;, \u0026#39;Third-party SIP Device (Advanced)\u0026#39;, \u0026#39;Third-party SIP Device (Basic)\u0026#39;, \u0026#39;Tone Announcement Player\u0026#39;, \u0026#39;SIP Trunk\u0026#39;, \u0026#39;Universal Device Template\u0026#39;, \u0026#39;Voice Mail Port\u0026#39;, \u0026#39;MGCP Station\u0026#39;, \u0026#39;Music On Hold\u0026#39;, \u0026#39;CTI Route Point\u0026#39;, \u0026#39;Remote Destination Profile\u0026#39;, \u0026#39;Cisco IOS Software Media Termination Point (HDV2)\u0026#39;, \u0026#39;SCCP gateway virtual phone\u0026#39;, \u0026#39;Route List\u0026#39;, \u0026#39;Cisco TelePresence Conductor\u0026#39;, \u0026#39;Gatekeeper\u0026#39; ) AND typemodel.name NOT IN ( \u0026#39;Cisco 7970\u0026#39;, \u0026#39;Cisco 7971\u0026#39;, \u0026#39;Cisco 7921\u0026#39;, \u0026#39;Cisco 12 SP+\u0026#39;, \u0026#39;Cisco 12 SP\u0026#39;, \u0026#39;Cisco 12 S\u0026#39;, \u0026#39;Cisco 30 VIP\u0026#39;, \u0026#39;Cisco 30 SP+\u0026#39;, \u0026#39;Cisco 7902\u0026#39;, \u0026#39;Cisco 7905\u0026#39;, \u0026#39;Cisco 7910\u0026#39;, \u0026#39;Cisco 7912\u0026#39;, \u0026#39;Cisco 7920\u0026#39; ) GROUP BY typemodel.name ORDER BY typemodel.name Return # The query will return a table with two columns, one containing the unsupported phone model and the other the count of how many there are in the environment.\nrun sql SELECT COUNT(*), typemodel.name AS phonemodel FROM device INNER JOIN typemodel ON typemodel.enum = device.tkmodel WHERE typemodel.name NOT IN (\u0026#39;Cisco 3905\u0026#39;, \u0026#39;Cisco 6901\u0026#39;, \u0026#39;Cisco 7841\u0026#39;, \u0026#39;Cisco 7811\u0026#39;, \u0026#39;Cisco 7821\u0026#39;, \u0026#39;Cisco 7841\u0026#39;, \u0026#39;Cisco 7861\u0026#39;, \u0026#39;Cisco 7832\u0026#39;, \u0026#39;7915 12-Button Line Expansion Module\u0026#39;, \u0026#39;7915 24-Button Line Expansion Module\u0026#39;, \u0026#39;7916 12-Button Line Expansion Module\u0026#39;, \u0026#39;7916 24-Button Line Expansion Module\u0026#39;, \u0026#39;Cisco 7942\u0026#39;, \u0026#39;Cisco 7962\u0026#39;, \u0026#39;Cisco 7945\u0026#39;, \u0026#39;Cisco 7965\u0026#39;, \u0026#39;Cisco 8811\u0026#39;, \u0026#39;Cisco 8821\u0026#39;, \u0026#39;Cisco 8841\u0026#39;, \u0026#39;Cisco 8851\u0026#39;, \u0026#39;Cisco 8851NR\u0026#39;, \u0026#39;Cisco 8861\u0026#39;, \u0026#39;Cisco 8831\u0026#39;, \u0026#39;Cisco 8845\u0026#39;, \u0026#39;Cisco 8865\u0026#39;, \u0026#39;Cisco 8865NR\u0026#39;, \u0026#39;Cisco 8832\u0026#39;, \u0026#39;Cisco 8945\u0026#39;, \u0026#39;Cisco 8961\u0026#39;, \u0026#39;Cisco 9951\u0026#39;, \u0026#39;Cisco 9971\u0026#39;, \u0026#39;Cisco Dual Mode for Android\u0026#39;, \u0026#39;Cisco Dual Mode for iPhone\u0026#39;, \u0026#39;Cisco Jabber for Tablet\u0026#39;, \u0026#39;Cisco Jabber for Mac\u0026#39;, \u0026#39;Cisco Unified Client Services Framework\u0026#39;, \u0026#39;Cisco IP Communicator\u0026#39;, \u0026#39;Cisco ATA 190\u0026#39;, \u0026#39;Cisco ATA 191\u0026#39;, \u0026#39;Cisco DX650\u0026#39;, \u0026#39;Cisco DX70\u0026#39;, \u0026#39;Cisco DX80\u0026#39;, \u0026#39;Cisco TelePresence IX5000\u0026#39;, \u0026#39;Cisco TelePresence EX60\u0026#39;, \u0026#39;Cisco TelePresence EX90\u0026#39;, \u0026#39;Cisco TelePresence MX200 G2\u0026#39;, \u0026#39;Cisco TelePresence MX300 G2\u0026#39;, \u0026#39;Cisco TelePresence MX700\u0026#39;, \u0026#39;Cisco TelePresence MX800\u0026#39;, \u0026#39;Cisco TelePresence MX800 Dual\u0026#39;, \u0026#39;Cisco TelePresence SX10\u0026#39;, \u0026#39;Cisco TelePresence SX20\u0026#39;, \u0026#39;Cisco TelePresence SX80\u0026#39;, \u0026#39;Cisco Webex DX80\u0026#39;) AND typemodel.name NOT IN (\u0026#39;Analog Phone\u0026#39;, \u0026#39;Cisco VGC Phone\u0026#39;, \u0026#39;Cisco IOS Conference Bridge (HDV2)\u0026#39;, \u0026#39;MGCP Trunk\u0026#39;, \u0026#39;CTI Port\u0026#39;, \u0026#39;Conference Bridge\u0026#39;, \u0026#39;Media Termination Point\u0026#39;, \u0026#39;Interactive Voice Response\u0026#39;, \u0026#39;Cisco IOS Media Termination Point (HDV2)\u0026#39;, \u0026#39;Third-party SIP Device (Advanced)\u0026#39;, \u0026#39;Third-party SIP Device (Basic)\u0026#39;, \u0026#39;Tone Announcement Player\u0026#39;, \u0026#39;SIP Trunk\u0026#39;, \u0026#39;Universal Device Template\u0026#39;, \u0026#39;Voice Mail Port\u0026#39;, \u0026#39;MGCP Station\u0026#39;, \u0026#39;Music On Hold\u0026#39;, \u0026#39;CTI Route Point\u0026#39;, \u0026#39;Remote Destination Profile\u0026#39;, \u0026#39;Cisco IOS Software Media Termination Point (HDV2)\u0026#39;, \u0026#39;SCCP gateway virtual phone\u0026#39;, \u0026#39;Route List\u0026#39;, \u0026#39;Cisco TelePresence Conductor\u0026#39;, \u0026#39;Gatekeeper\u0026#39;) AND typemodel.name NOT IN (\u0026#39;Cisco 7970\u0026#39;, \u0026#39;Cisco 7971\u0026#39;, \u0026#39;Cisco 7921\u0026#39;, \u0026#39;Cisco 12 SP+\u0026#39;, \u0026#39;Cisco 12 SP\u0026#39;, \u0026#39;Cisco 12 S\u0026#39;, \u0026#39;Cisco 30 VIP\u0026#39;, \u0026#39;Cisco 30 SP+\u0026#39;, \u0026#39;Cisco 7902\u0026#39;, \u0026#39;Cisco 7905\u0026#39;, \u0026#39;Cisco 7910\u0026#39;, \u0026#39;Cisco 7912\u0026#39;, \u0026#39;Cisco 7920\u0026#39;) GROUP BY typemodel.name ORDER BY typemodel.name (count(*)) phonemodel ========== ==================== 16 Cisco 6921 1 Cisco 6941 1 Cisco 7936 54 Cisco 7937 1 Cisco 7941 1 Cisco 7960 735 Cisco 8941 1 Cisco ATA 186 3 Cisco ATA 187 ... ","date":"15 October 2022","permalink":"/2022/10/find-deprecated-phones-via-sql/","section":"Posts","summary":"As with every CUCM release, some phones will not be supported anymore. For this example, let us look at how to find a list of phones on CUCM 11.X that are deprecated in release 12.","title":"Find Deprecated Phones via SQL"},{"content":"Cisco Unified Communications Manager uses an Informix database for data storage. Accessing this data directly using SQL queries to create custom reports or gather data for analysis has often come in handy. These days I work primarily with the SOAP API, and depending on the information I\u0026rsquo;m looking for, sending SQL queries via Thin AXL is sometimes more efficient.\nThis article aims to give you a quick introduction to the CUCM database. You don\u0026rsquo;t need to know anything about Informix. Still, a basic understanding of relational databases, some basic SQL and an offline copy of Cisco\u0026rsquo;s Data Dictionary will help you with creating any kinds of queries you might need.\nIntro # There are three main categories of tables in the CUCM Informix database - \u0026lsquo;main\u0026rsquo; as in most-used; system tables, mapping tables, and enumeration tables. Then there are dynamic tables and configuration tables.\nSystem tables Regular tables containing data for a particular CUCM configuration object like devices, devicepools, end users, partitions, etc. Mapping tables Mapping primary keys/unique identifiers of one table to those of another. E.g. the DeviceNumPlanMap maps phones (device table) to directory numbers (numplan table). Type tables Used by other tables to resolve enumerator IDs to some name or moniker. E.g. contains the human-readable phone model name to the numeric tkmodel value of a phone in the device table. This table is static and cannot be altered. Both standard tables and mapping tables use primary keys called pkid, whereas type tables use primary keys called enum.\nThe foreign keys used to link fields in one table with another table or another record within the same table follow a specific naming convention:\npkid this is the primary key ID. fk(x) This is a foreign key (unique value) in another table. That table will be named (x), and the foreign key field will always be pkid. fk(x)_(y) This is a foreign key (unique value) in another table. The table will be named (x), and the \u0026ldquo;_(y)\u0026rdquo; is a descriptor which usually indicates that in a given record, there is more than one field pointing to the same foreign table. tk(x) This is a type key (enumerator) in another table. The table will be named type(x), and the foreign key will always be an enum. ik(x) Fields that begin with the letters \u0026ldquo;ik\u0026rdquo; represent internal keys in the same table. The table will be named (x). Show all tables in the database # To navigate the database and understand what tables and data are available to us, we need to identify the tables by name and id. The table IDs between 1 and 100 are used for system information. Table IDs over 1000 are where CUCM stores CDR information.\nSELECT tabname, tabid FROM systables or\nSELECT tabname, tabid FROM systables WHERE tabid \u0026gt; 100 AND tabid \u0026lt; 1000 Output:\nrun sql SELECT tabname,tabid FROM systables WHERE tabid \u0026gt; 100 AND tabid \u0026lt; 1000 tabname tabid ================================ ===== dblschemaorder 101 aarneighborhood 102 aardialprefixmatrix 103 alarmusertext 104 availdialplan 105 axlchangenotifyclient 106 carrierselectprofile 107 ccaprofile 108 ccdhosteddngroup 109 ccdhosteddn 110 cdrmconfig 111 cmcinfo 112 codeclist 113 confidentialaccesslevel 114 ... Show all columns of a specific table # The first step is to identify the tabid of, e.g. the device table. We know from the previous example that we can get the tabid from systables.\nSELECT tabname, tabid FROM systables WHERE tabname = \u0026#34;device\u0026#34; Output:\nrun sql SELECT tabname,tabid FROM systables WHERE tabname=\u0026#34;device\u0026#34; tabname tabid ======= ===== device 753 Using the tabid, we can now get the colname and colno values from syscolumns.\nSELECT colname, colno FROM syscolumns WHERE tabid = \u0026#34;753\u0026#34; Output:\nrun sql SELECT colname, colno FROM syscolumns WHERE tabid=\u0026#34;753\u0026#34; colname tabid colno ===================================== ===== ===== pkid 753 1 name 753 2 description 753 3 tkmodel 753 4 tkdeviceprotocol 753 5 tkprotocolside 753 6 specialloadinformation 753 7 fkdevicepool 753 8 fkphonetemplate 753 9 fkcallingsearchspace 753 10 ctiid 753 11 tkclass 753 12 fkprocessnode 753 13 defaultdtmfcapability 753 14 fklocation 753 15 ... Or combine the two queries into one.\nSELECT c.colname, t.tabid, c.colno FROM systables AS t, syscolumns AS c WHERE t.tabname = \u0026#34;device\u0026#34; AND t.tabid = c.tabid Cisco Resources # Cisco created Data Dictionaries for all CUCM releases. The Data Dictionary describes the data stored in the database in meticulous detail; every table, field, element, data type, and relationship.\nThe Cisco AXL documentation archive https://developer.cisco.com/docs/axl/#!archived-references contains CUCM Data Dictionaries for all releases since 7.1(3).\n","date":"7 October 2022","permalink":"/2022/10/working-with-the-cucm-database/","section":"Posts","summary":"Cisco Unified Communications Manager uses an Informix database for data storage. Accessing this data directly using SQL queries to create custom reports or gather data for analysis has often come in handy.","title":"Working With The CUCM Database"},{"content":"Well, thanks for the interest, truly, but if you are here, we are much alike or have similar interests. So, no big surprises here.\nI’m John, and I’ve worked as both a network and voice (UC) engineer my entire career and always for large(r) multinational enterprises. I decided to move into the network automation space a few years ago. So, I started by learning some Python and scripting some of my daily tasks, mainly using Paramiko and Netmiko, instead of doing them manually. I also got the Cisco DevNet Associate cert and am working now on the DevNet Professional cert - because it’s always good to have some certs. There is a lot to learn still.\nSo, why this blog, then? Fair question. I guess I just want to share. Many times in my career, I was stuck with a problem, hitting a wall, and then stumbled upon a blog entry of a fellow engineer facing the same challenge and decided to share the solution, saving me from many headaches. I hope the information I share on this website will be helpful to someone else out there on the interwebs and protect them from unnecessary headaches, too.\n","date":"3 October 2022","permalink":"/about/","section":"Awetomate","summary":"Well, thanks for the interest, truly, but if you are here, we are much alike or have similar interests. So, no big surprises here.\nI’m John, and I’ve worked as both a network and voice (UC) engineer my entire career and always for large(r) multinational enterprises.","title":"About"}]