[{"content":"","date":"7 October 2022","permalink":"/","section":"Awetomate","summary":"","title":"Awetomate"},{"content":"","date":"7 October 2022","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"7 October 2022","permalink":"/tags/cucm/","section":"Tags","summary":"","title":"cucm"},{"content":"","date":"7 October 2022","permalink":"/categories/cucm/","section":"Categories","summary":"","title":"cucm"},{"content":"","date":"7 October 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"7 October 2022","permalink":"/tags/sql/","section":"Tags","summary":"","title":"sql"},{"content":"","date":"7 October 2022","permalink":"/categories/sql/","section":"Categories","summary":"","title":"sql"},{"content":"","date":"7 October 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Cisco Unified Communications Manager uses an Informix database for data storage. Accessing this data directly using SQL queries to create custom reports or gather data for analysis has often come in handy. These days I work primarily with the SOAP API, and depending on the information I\u0026rsquo;m looking for, sending SQL queries via Thin AXL is sometimes more efficient.\nThis article aims to give you a quick introduction to the CUCM database. You don\u0026rsquo;t need to know anything about Informix. Still, a basic understanding of relational databases, some basic SQL and an offline copy of Cisco\u0026rsquo;s Data Dictionary will help you with creating any kinds of queries you might need.\nIntro # There are three main categories of tables in the CUCM Informix database - \u0026lsquo;main\u0026rsquo; as in most-used; system tables, mapping tables, and enumeration tables. Then there are dynamic tables and configuration tables.\nSystem tables Regular tables containing data for a particular CUCM configuration object like devices, devicepools, end users, partitions, etc. Mapping tables Mapping primary keys/unique identifiers of one table to those of another. E.g. the DeviceNumPlanMap maps phones (device table) to directory numbers (numplan table). Type tables Used by other tables to resolve enumerator IDs to some name or moniker. E.g. contains the human-readable phone model name to the numeric tkmodel value of a phone in the device table. This table is static and cannot be altered. Both standard tables and mapping tables use primary keys called pkid, whereas type tables use primary keys called enum.\nThe foreign keys used to link fields in one table with another table or another record within the same table follow a specific naming convention:\npkid this is the primary key ID. fk(x) This is a foreign key (unique value) in another table. That table will be named (x), and the foreign key field will always be pkid. fk(x)_(y) This is a foreign key (unique value) in another table. The table will be named (x), and the \u0026ldquo;_(y)\u0026rdquo; is a descriptor which usually indicates that in a given record, there is more than one field pointing to the same foreign table. tk(x) This is a type key (enumerator) in another table. The table will be named type(x), and the foreign key will always be an enum. ik(x) Fields that begin with the letters \u0026ldquo;ik\u0026rdquo; represent internal keys in the same table. The table will be named (x). Show all tables in the database # To navigate the database and understand what tables and data are available to us, we need to identify the tables by name and id. The table IDs between 1 and 100 are used for system information. Table IDs over 1000 are where CUCM stores CDR information.\nSELECT tabname, tabid FROM systables or\nSELECT tabname, tabid FROM systables WHERE tabid \u0026gt; 100 AND tabid \u0026lt; 1000 Output:\nrun sql SELECT tabname,tabid FROM systables WHERE tabid \u0026gt; 100 AND tabid \u0026lt; 1000 tabname tabid ================================ ===== dblschemaorder 101 aarneighborhood 102 aardialprefixmatrix 103 alarmusertext 104 availdialplan 105 axlchangenotifyclient 106 carrierselectprofile 107 ccaprofile 108 ccdhosteddngroup 109 ccdhosteddn 110 cdrmconfig 111 cmcinfo 112 codeclist 113 confidentialaccesslevel 114 ... Show all columns of a specific table # The first step is to identify the tabid of, e.g. the device table. We know from the previous example that we can get the tabid from systables.\nSELECT tabname, tabid FROM systables WHERE tabname = \u0026#34;device\u0026#34; Output:\nrun sql SELECT tabname,tabid FROM systables WHERE tabname=\u0026#34;device\u0026#34; tabname tabid ======= ===== device 753 Using the tabid, we can now get the colname and colno values from syscolumns.\nSELECT colname, colno FROM syscolumns WHERE tabid = \u0026#34;753\u0026#34; Output:\nrun sql SELECT colname, colno FROM syscolumns WHERE tabid=\u0026#34;753\u0026#34; colname tabid colno ===================================== ===== ===== pkid 753 1 name 753 2 description 753 3 tkmodel 753 4 tkdeviceprotocol 753 5 tkprotocolside 753 6 specialloadinformation 753 7 fkdevicepool 753 8 fkphonetemplate 753 9 fkcallingsearchspace 753 10 ctiid 753 11 tkclass 753 12 fkprocessnode 753 13 defaultdtmfcapability 753 14 fklocation 753 15 ... Or combine the two queries into one.\nSELECT c.colname, t.tabid, c.colno FROM systables AS t, syscolumns AS c WHERE t.tabname = \u0026#34;device\u0026#34; AND t.tabid = c.tabid Cisco Resources # Cisco created Data Dictionaries for all CUCM releases. The Data Dictionary describes the data stored in the database in meticulous detail; every table, field, element, data type, and relationship.\nThe Cisco AXL documentation archive https://developer.cisco.com/docs/axl/#!archived-references contains CUCM Data Dictionaries for all releases since 7.1(3).\n","date":"7 October 2022","permalink":"/2022/10/working-with-cucm-database/","section":"Posts","summary":"Cisco Unified Communications Manager uses an Informix database for data storage. Accessing this data directly using SQL queries to create custom reports or gather data for analysis has often come in handy.","title":"Working With Cucm Database"},{"content":"Well, thanks for the interest, truly, but if you are here, we probably are much alike or have similar interests.\nSoooo, no big surprises here…\nI’m John, and I’ve worked as both network and voice (UC) engineer my entire career and always for large(r) multinational enterprises. About 1-2 years ago, I decided that I wanted to move into the network automation space. So, I started by learning some Python and scripting some of my daily tasks instead of doing them manually. I also got the Cisco DevNet Associate cert and am working now on the DevNet Professional cert - because it’s always good to have some certs. There is a lot to learn still, and the goal is to become a proper network automation engineer, as opposed to a network engineer who writes a bunch of scripts.\nSo, why this blog then? Fair question. I guess I just want to share. Many times in my career, I was stuck with a problem, hitting a wall, and then stumbled upon a blog entry of a fellow engineer who had been facing the same challenge and decided to share the solution, saving me from a lot of headaches. I hope the information I share on this website will be helpful to someone else out there on the interwebs and safes them from unnecessary headaches, too.\n","date":"3 October 2022","permalink":"/about/","section":"Awetomate","summary":"Well, thanks for the interest, truly, but if you are here, we probably are much alike or have similar interests.\nSoooo, no big surprises here…\nI’m John, and I’ve worked as both network and voice (UC) engineer my entire career and always for large(r) multinational enterprises.","title":"About"}]